@page "/"
@rendermode InteractiveServer

@using System.Net.Http
@using System.Text.Json
@using BosonAssessment.Components.Models
@using Blazored.SessionStorage

@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime
@inject ISessionStorageService sessionStorage
@inject IConfiguration Configuration

<PageTitle>GoFetch - Home</PageTitle>

<div class="container">
    <!-- Search bar -->
    <Search OnSearch="UpdateQuery" />
    <!-- Videos container -->
    <div class="videos-container" @ref="videosContainer">
        <!-- Header to display search query -->
        @if (!string.IsNullOrEmpty(searchQuery))
        {
            <div class="videos-header">Fetching results for "@searchQuery"</div>
        }
        <div class="videos-grid">
            <!-- Videos -->
            @foreach (var video in CurrentPageVideos)
            {
                <!-- Display thumbnail, title, and channel name -->
                <div class="video-item">
                    <a @onclick="(() => RedirectToVideoComponent(video.VideoId))">
                        <div class="thumbnail-container">
                            <img src="@video.ThumbnailUrl" alt="@video.Title" class="thumbnail-img" />
                            <div class="overlay"></div>
                        </div>
                    </a>
                    <div class="channel-details-container">
                        <!-- Display channel logo if available -->
                        <div class="channel-logo">
                            @if (!string.IsNullOrEmpty(video.ChannelLogoUrl))
                            {
                                <img src="@video.ChannelLogoUrl" alt="@video.ChannelTitle" />
                            }
                        </div>
                        <div class="video-details">
                            <h2>@System.Net.WebUtility.HtmlDecode(video.Title)</h2>
                            <p>@System.Net.WebUtility.HtmlDecode(video.ChannelTitle)</p>
                        </div>
                    </div>
                </div>
            }
            <!-- End of video block -->
        </div>
        <!-- Footer to display nav buttons -->
        <div class="videos-footer">
            <!-- Previous button -->
            <button class="page-button" disabled="@IsFirstPage" @onclick="LoadPreviousPageAsync">
                <span class="button-content">
                    <span class="previous-button-text">Previous</span>
                    <!-- If the button is disabled, show the disabled image; otherwise, show the regular image -->
                    @if (IsFirstPage)
                    {
                        <img src="/images/pawprint_disabled.png" alt="Previous" class="previous-button-img" />
                    }
                    else
                    {
                        <img src="/images/pawprint.png" alt="Previous" class="previous-button-img" />
                    }
                </span>
            </button>
            <!-- Next button -->
            <button class="page-button" disabled="@IsLastPage" @onclick="LoadNextPageAsync">
                <span class="button-content">
                    <!-- If the button is disabled, show the disabled image; otherwise, show the regular image -->
                    @if (IsLastPage)
                    {
                        <img src="/images/pawprint_disabled.png" alt="Next" class="next-button-img" />
                    }
                    else
                    {
                        <img src="/images/pawprint.png" alt="Next" class="next-button-img" />
                    }
                    <span class="next-button-text">Next</span>
                </span>
            </button>
        </div>
        <!-- End of footer block -->
    </div>
    <!-- End of video container block -->
</div>

@code {

    // HTTP client instance for fetching data from the API
    private readonly HttpClient httpClient = new HttpClient();

    private List<YouTubeVideo> videos = new List<YouTubeVideo>();
    private List<YouTubeVideo> CurrentPageVideos = new List<YouTubeVideo>();

    private ElementReference videosContainer;

    private string? apiKey;
    private string? nextPageToken;
    private string? prevPageToken;
    private string? searchQuery = null; // Default search query

    private int maxResultsPerPage = 12; // Maximum number of videos per page
    private int currentPageIndex = 0;
    private int TotalResults = 0; // Total number of results

    private bool IsFirstPage => currentPageIndex == 0; // Boolean indicating whether the current page is the first page
    private bool IsLastPage => string.IsNullOrEmpty(nextPageToken); // Boolean indicating whether the current page is the last page

    // Initialization method called when the component is initialized
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Retrieve search query and current page index using JavaScript interop
            var storedSearchQuery = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "searchQuery");
            searchQuery = storedSearchQuery?.Trim('"'); // Remove leading and trailing quotes

            // Load videos after retrieving session storage values
            await LoadVideosAsync(false);
            UpdateCurrentPageVideos();
            StateHasChanged();
        }
    }

    // Method to fetch videos using the API
    private async Task LoadVideosAsync(bool searchQueryChanged, string? pageToken = null)
    {

        // Clear videos if search query has been updated
        if (searchQueryChanged)
        {
            videos.Clear();
        }

        apiKey = Configuration["API_KEY"];
        var maxResults = 100000;
        var order = "relevance";
        string query = string.IsNullOrEmpty(searchQuery) ? "dog" : $"dog+{searchQuery.Replace(" ", "+")}"; // Replace spaces with '+'
        var url = $"https://www.googleapis.com/youtube/v3/search?key={apiKey}&q={query}&part=snippet&type=video&maxResults={maxResults}&order={order}";

        if (!string.IsNullOrEmpty(pageToken))
        {
            url += $"&pageToken={pageToken}";
        }

        var response = await httpClient.GetAsync(url);
        var content = await response.Content.ReadAsStringAsync();

        var result = JsonSerializer.Deserialize<YouTubeSearchResponse>(content);

        if (result != null && result.items != null)
        {
            nextPageToken = result.nextPageToken;
            prevPageToken = result.prevPageToken;
            TotalResults = result.pageInfo.totalResults;

            await FetchChannelDetailsAsync(result.items);
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("No search results found.");
        }
    }

    // Method to fetch channel details for each video
    private async Task FetchChannelDetailsAsync(List<YouTubeVideoItem> items)
    {
        var tasks = items.Select(item => FetchChannelDetailsForVideoAsync(item.snippet.channelId));
        var channelDetailsResults = await Task.WhenAll(tasks);

        foreach (var (video, channelDetailsResult) in items.Zip(channelDetailsResults, (item, details) => (item, details)))
        {

            // Get channel logo url
            if (channelDetailsResult != null && channelDetailsResult.items != null && channelDetailsResult.items.Any())
            {
                video.snippet.channelLogoUrl = channelDetailsResult.items.First().snippet.thumbnails.@default.url;
            }

            // Add each video and its contents to the videos list
            videos.Add(new YouTubeVideo
                {
                    VideoId = video.id.videoId,
                    Title = video.snippet.title,
                    ThumbnailUrl = video.snippet.thumbnails.@high.url,
                    ChannelTitle = video.snippet.channelTitle,
                    ChannelId = video.snippet.channelId,
                    ChannelLogoUrl = video.snippet.channelLogoUrl
                });
        }
    }

    // Method to fetch channel details for a single video
    private async Task<YouTubeChannelResponse> FetchChannelDetailsForVideoAsync(string channelId)
    {
        var url = $"https://www.googleapis.com/youtube/v3/channels?key={apiKey}&id={channelId}&part=snippet";

        var response = await httpClient.GetAsync(url);
        var content = await response.Content.ReadAsStringAsync();

        var deserialized = JsonSerializer.Deserialize<YouTubeChannelResponse>(content);
        YouTubeChannelResponse defaultResponse = new YouTubeChannelResponse();

        if (deserialized != null) return deserialized;
        else return defaultResponse;

    }

    // Method to update the list of videos for the current page
    private void UpdateCurrentPageVideos()
    {
        CurrentPageVideos = videos.Skip(currentPageIndex * maxResultsPerPage)
                                  .Take(maxResultsPerPage)
                                  .ToList();
    }

    // Method to load the next page of videos
    private async Task LoadNextPageAsync()
    {
        // Check if there is a next page available
        if (!string.IsNullOrEmpty(nextPageToken))
        {
            currentPageIndex++;

            // Load the videos for the next page and update the current page videos
            await LoadVideosAsync(false, nextPageToken);
            UpdateCurrentPageVideos();

            // Scroll to the top of the videos container
            await ScrollToTopOfVideosContainerAsync();
        }
    }

    // Method to load the previous page of videos
    private async Task LoadPreviousPageAsync()
    {
        // Check if there is a previous page available
        if (!string.IsNullOrEmpty(prevPageToken))
        {
            currentPageIndex--;

            // Update the current page videos based on the cached data and refresh page
            UpdateCurrentPageVideos();
            await Task.Delay(1);
            StateHasChanged();

            // Scroll to the top of the videos container
            await ScrollToTopOfVideosContainerAsync();
        }
    }

    // Method to handle "Enter" key press event on the search input
    private async Task SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Call UpdateQuery with new query
            await UpdateQuery(searchQuery);
        }
    }

    // Method to handle updated search query
    private async Task UpdateQuery(string? query)
    {
        currentPageIndex = 0; // Reset currentPageIndex

        // Save search query and current page index to session storage
        await sessionStorage.SetItemAsync("searchQuery", query);
        searchQuery = query;

        // Reload page with new query
        await LoadVideosAsync(true);
        UpdateCurrentPageVideos();
    }

    // Method to redirect to Video page
    private void RedirectToVideoComponent(string videoId)
    {
        NavigationManager.NavigateTo($"/video/{videoId}");
    }

    // Method to scroll to the top of the video container
    private async Task ScrollToTopOfVideosContainerAsync()
    {
        await JSRuntime.InvokeVoidAsync("scrollToElement", videosContainer);
    }

}

<!-- Method to scroll to the top of the video container upon page change -->
<script>
    window.scrollToElement = function (element) {
        element.scrollTop = 0;
    }
</script>
