@page "/"

@using System.Net.Http
@using System.Text.Json
@using System.Linq

<PageTitle>Home</PageTitle>

<!--Display search query and total number of results-->
@if (TotalResults > 0)
{
    <h1>Showing @CurrentPageVideos.Count out of @TotalResults results for: "dog"</h1>
}

<!--Place videos in 3x3 grid format-->
<div class="videos-container">
    <div class="videos-grid">
        @foreach (var video in CurrentPageVideos)
        {
            <!--Display thumbnail, title, and channel name-->
            <div class="video-item">
                <img src="@video.ThumbnailUrl" alt="@video.Title" />
                <div class="video-details">
                    <h2>@video.Title</h2>
                    <p>@video.ChannelTitle</p>
                </div>
            </div>
        }
    </div>
</div>

<!--Create buttons to navigate through pages-->
<button disabled="@IsFirstPage" @onclick="LoadPreviousPage">Previous</button>
<button disabled="@IsLastPage" @onclick="LoadNextPage">Next</button>

@code {
    private List<YouTubeVideo> videos = new List<YouTubeVideo>();
    private List<YouTubeVideo> CurrentPageVideos = new List<YouTubeVideo>();
    private string nextPageToken;
    private string prevPageToken;
    private int maxResultsPerPage = 9;
    private int currentPageIndex = 0;
    private int TotalResults = 0; // Variable to store total number of results

    private bool IsFirstPage => currentPageIndex == 0; // Update IsFirstPage property based on currentPageIndex
    private bool IsLastPage => string.IsNullOrEmpty(nextPageToken);

    protected override async Task OnInitializedAsync()
    {
        await LoadVideos();
        UpdateCurrentPageVideos();
    }

    // Load videos using api key and search query
    private async Task LoadVideos(string pageToken = null)
    {
        HttpClient httpClient = new HttpClient();
        var apiKey = "AIzaSyAAXu6CJwvARUkyg9ieuo9kmjxFUL4Mzxw";
        var searchQuery = "dog";
        var maxResults = 9; // Set value for number of videos to be displayed
        var order = "relevance"; // Set order
        var url = $"https://www.googleapis.com/youtube/v3/search?key={apiKey}&q={searchQuery}&part=snippet&type=video&maxResults={maxResults}&order={order}";

        if (!string.IsNullOrEmpty(pageToken))
        {
            url += $"&pageToken={pageToken}";
        }

        var response = await httpClient.GetAsync(url);
        var content = await response.Content.ReadAsStringAsync();
        var result = JsonSerializer.Deserialize<YouTubeSearchResponse>(content);

        if (result != null)
        {
            if (result.items != null)
            {
                // Add newly retrieved videos to the existing list
                videos.AddRange(result.items.Select(item => new YouTubeVideo
                    {
                        Title = item.snippet.title,
                        ThumbnailUrl = item.snippet.thumbnails.@default.url,
                        ChannelTitle = item.snippet.channelTitle
                    }));

                nextPageToken = result.nextPageToken;
                prevPageToken = result.prevPageToken;
                TotalResults = result.pageInfo.totalResults; // Set total results
            }
            else
            {
                // Handle case where no search results were found
                System.Diagnostics.Debug.WriteLine("No search results found.");
            }

        }
        else
        {
            // Handle case where result is null
            System.Diagnostics.Debug.WriteLine("Error: Unable to deserialize API response.");
        }
    }

    /* METHODS */

    // Load current page of videos to display
    private void UpdateCurrentPageVideos()
    {
        CurrentPageVideos = videos.Skip(currentPageIndex * maxResultsPerPage)
                                  .Take(maxResultsPerPage)
                                  .ToList();
    }

    // Load next page of videos
    private async Task LoadNextPage()
    {
        if (!string.IsNullOrEmpty(nextPageToken))
        {
            currentPageIndex++;
            await LoadVideos(nextPageToken); // Load videos for the next page
            UpdateCurrentPageVideos();
        }
    }

    // Load previous page of videos
    private async Task LoadPreviousPage()
    {
        if (!string.IsNullOrEmpty(prevPageToken))
        {
            currentPageIndex--;
            UpdateCurrentPageVideos();

            // Update IsFirstPage after loading the previous page
            await UpdateIsFirstPage();
        }
    }

    // Helper method to update IsFirstPage property
    private async Task UpdateIsFirstPage()
    {
        await Task.Delay(1); // Allow UI to update
        StateHasChanged(); // Notify Blazor to update UI
    }

    /* CLASSES */

    public class YouTubeVideo
    {
        public string Title { get; set; }
        public string ThumbnailUrl { get; set; }
        public string ChannelTitle { get; set; }
    }

    public class YouTubeSearchResponse
    {
        public List<YouTubeVideoItem> items { get; set; }
        public string nextPageToken { get; set; }
        public string prevPageToken { get; set; }
        public YouTubePageInfo pageInfo { get; set; } // Add pageInfo property
    }

    public class YouTubePageInfo
    {
        public int totalResults { get; set; } // Add totalResults property
    }

    public class YouTubeVideoItem
    {
        public YouTubeVideoSnippet snippet { get; set; }
    }

    public class YouTubeVideoSnippet
    {
        public string title { get; set; }
        public string channelTitle { get; set; }
        public YouTubeThumbnail thumbnails { get; set; }
    }

    public class YouTubeThumbnail
    {
        public YouTubeThumbnailDetails @default { get; set; }
    }

    public class YouTubeThumbnailDetails
    {
        public string url { get; set; }
    }
}