@page "/video/{videoId}"
@rendermode InteractiveServer

@using System.Net.Http
@using System.Text.Json
@using System.Linq
@using System.Threading.Tasks
@using BosonAssessment.Components.Models
@using Blazored.SessionStorage

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

<PageTitle>Video</PageTitle>

<div class="container">
    <!-- Search bar content -->
    <Search OnSearch="HandleSearch" />
    <div class="video-container">
        <!-- Button to return to home page -->
        <div class="return-button">
            <a href="/" class="return-button-link">
                <div class="button-content">
                    <span class="button-text">Back</span>
                    <img src="/images/pawprint.png" alt="Return Button" class="return-button-img">
                </div>
            </a>
        </div>
        <div class="video-contents">
            <div class="youtube-video">
                <!-- Embed YouTube video using iframe -->
                <iframe width="960" height="540" src="https://www.youtube.com/embed/@VideoId" frameborder="0" allowfullscreen></iframe>
            </div>
        </div>
        <div class="video-details-container">
            <!-- Display channel logo if available -->
            <div class="channel-logo">
                @if (!string.IsNullOrEmpty(channelLogoUrl))
                {
                    <img src="@channelLogoUrl" alt="Channel Logo" />
                }
            </div>
            <div class="video-details">
                <h2>@System.Net.WebUtility.HtmlDecode(videoTitle)</h2>
                <p>@System.Net.WebUtility.HtmlDecode(channelTitle)</p>
            </div>
        </div>
    </div>
</div>

@code {

    private string? apiKey;

    [Parameter]
    public string VideoId { get; set; }
    public string videoTitle { get; set; }
    public string channelTitle { get; set; }
    public string channelLogoUrl { get; set; }

    // Constructor
    public Video()
    {
        VideoId = "";
        videoTitle = "";
        channelTitle = "";
        channelLogoUrl = "";
    }

    protected override async Task OnInitializedAsync()
    {
        // Call YouTube Data API to get video details
        apiKey = Configuration["API_KEY"];
        await GetVideoDetails(VideoId);
    }

    private async Task GetVideoDetails(string videoId)
    {
        // Construct the API request URL
        string videoUrl = $"https://www.googleapis.com/youtube/v3/videos?key={apiKey}&id={videoId}&part=snippet";

        // Make the API request
        var videoResponse = await httpClient.GetAsync(videoUrl);
        var videoContent = await videoResponse.Content.ReadAsStringAsync();
        var videoResult = JsonSerializer.Deserialize<YouTubeVideoResponse>(videoContent);

        // Log raw content of HTTP response
        System.Diagnostics.Debug.WriteLine($"Response Content: {videoContent}");

        // Check if the response contains any items
        if (videoResult?.items != null && videoResult.items.Count > 0)
        {
            // Retrieve video details from the first item
            var video = videoResult.items[0].snippet;
            videoTitle = video.title;       
            channelTitle = video.channelTitle;

            // Retrieve channel ID from the first item
            string channelId = videoResult.items[0].snippet.channelId;

            // Construct the API request URL for channel details
            string channelUrl = $"https://www.googleapis.com/youtube/v3/channels?key={apiKey}&id={channelId}&part=snippet";

            // Make the API request for channel details
            var channelResponse = await httpClient.GetAsync(channelUrl);
            var channelContent = await channelResponse.Content.ReadAsStringAsync();
            var channelResult = JsonSerializer.Deserialize<YouTubeVideoResponse>(channelContent);

            // Log raw content of channel HTTP response
            System.Diagnostics.Debug.WriteLine($"Channel Response Content: {channelContent}");

            // Check if the channel response contains any items
            if (channelResult?.items != null && channelResult.items.Count > 0)
            {
                // Retrieve channel logo URL from the first item
                channelLogoUrl = channelResult.items[0].snippet.thumbnails.@default.url;
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("No channel details found.");
            }
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("No video details found.");
        }

    }

    private void HandleSearch(string query)
    {
        // Construct the URL with the new search query
        var returnUrl = $"/?searchQuery={query}";

        // Navigate to the home page with the new search query
        navigationManager.NavigateTo(returnUrl);
    }

    // Method to navigate back to the home page
    private async Task GoToHomePage()
    {
        // Retrieve search query and current page index from session storage
        var searchQuery = await sessionStorage.GetItemAsync<string>("searchQuery");

        // Construct URL with search query and page index
        var returnUrl = $"/?searchQuery={searchQuery}";

        navigationManager.NavigateTo(returnUrl);
    }

}